package backend

import (
	"fmt"
	"github.com/itskovichanton/core/pkg/core"
	"math/rand"
	"salespalm/server/app/entities"
	utils2 "salespalm/server/app/utils"
	"time"
)

type ITaskDemoService interface {
	GenerateTasks(count int, task *entities.Task) int
	FindRandomContact(accountId entities.ID) *entities.Contact
}

type TaskDemoServiceImpl struct {
	ITaskDemoService

	ContactService  IContactService
	TaskService     ITaskService
	SequenceService ISequenceService
	TemplateService ITemplateService
	AccountService  IUserService
	Config          *core.Config
	templates       map[string]string
}

func (c *TaskDemoServiceImpl) Init() error {
	rand.Seed(42)
	c.templates = c.TemplateService.Templates()
	return nil
}

func (c *TaskDemoServiceImpl) FindRandomContact(accountId entities.ID) *entities.Contact {
	return c.ContactService.GetByIndex(accountId, rand.Intn(1000))
}

func (c *TaskDemoServiceImpl) GenerateTasks(count int, task *entities.Task) int {

	generated := 0
	for i := 0; i < count; i++ {
		contact := c.FindRandomContact(task.AccountId)
		_, err := c.TaskService.CreateOrUpdate(c.generateRandomTask(contact, task))
		if err == nil {
			generated++
		}
	}
	return generated
}

func (c *TaskDemoServiceImpl) generateRandomTask(contact *entities.Contact, spec *entities.Task) *entities.Task {

	r := &entities.Task{
		BaseEntity: entities.BaseEntity{
			AccountId: spec.AccountId,
		},
		Sequence: &entities.IDAndTitle{
			ID: c.SequenceService.GetByIndex(spec.AccountId, rand.Intn(30)).GetId(),
		},
		Contact: contact,
	}

	types := c.TaskService.Commons(spec.AccountId).Types
	var taskType *entities.TaskType
	if len(spec.Type) == 0 {
		taskType = *utils2.RandomEntry(types)
	} else {
		taskType = types[spec.Type]
	}
	r.Type = taskType.Creds.Name
	if taskType.IsMessenger() && len(contact.Phone) == 0 {
		if rand.Intn(10) > 5 {
			taskType = entities.TaskTypeManualEmail
		} else {
			taskType = entities.TaskTypeLinkedin
		}
	}
	r.Type = taskType.Creds.Name
	r.Action = taskType.Actions[rand.Intn(len(taskType.Actions))].Name

	switch r.Type {
	case entities.TaskTypeWhatsapp.Creds.Name:
		r.Name = "–ù–∞–ø–∏—Å–∞—Ç—å –≤ Whatsapp"
		r.Description = "–ù–∞–ø–∏—Å–∞—Ç—å –≤ –ª–∏—á–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ Whatsapp: " + utils2.FormatUrl("https://wa.me", contact.Phone)
		break
	case entities.TaskTypeTelegram.Creds.Name:
		r.Name = "–ù–∞–ø–∏—Å–∞—Ç—å –≤ Telegram"
		r.Description = "–ù–∞–ø–∏—Å–∞—Ç—å –≤ –ª–∏—á–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ Telegram: " + utils2.FormatUrl("https://t.me", contact.Phone)
		break
	case entities.TaskTypeCall.Creds.Name:
		r.Name = "–ü–æ–∑–≤–æ–Ω–∏—Ç—å –ø–æ —Ç–µ–ª–µ—Ñ–æ–Ω—É"
		r.Description = "–ü–æ–∑–≤–æ–Ω–∏—Ç—å –ø–æ –Ω–æ–º–µ—Ä—É —Ç–µ–ª–µ—Ñ–æ–Ω–∞ " + contact.Phone + ". –ù–∞—Å—Ç—Ä–æ–π—Å—è –Ω–∞ –ø—Ä–æ–¥—É–∫—Ç–∏–≤–Ω—ã–π –ª–∞–¥ üòä"
		break
	case entities.TaskTypeLinkedin.Creds.Name:
		c.updateLinkedinTask(r)
		break
	case entities.TaskTypeManualEmail.Creds.Name:
		r.Name = "–û—Ç–ø—Ä–∞–≤–∏—Ç—å –ø–∏—Å—å–º–æ"
		r.Description = fmt.Sprintf("–û—Ç–ø—Ä–∞–≤–∏—Ç—å –ø–∏—Å—å–º–æ –¥–ª—è %v –Ω–∞ %v", contact.Name, contact.Email)
		break
	}

	switch r.Type {
	case entities.TaskTypeManualEmail.Creds.Name:
		r.DueTime = time.Now().Add(20 * time.Minute)
		templateName := *utils2.RandomEntry(c.templates)
		r.Body = "template:" + templateName
		r.Subject = "–ö–æ–º–ø–∞–Ω–∏—è ITBest –ø—Ä–∏–≥–ª–∞—à–∞–µ—Ç –í–∞—Å –Ω–∞ —Å–æ–±–µ—Å–µ–¥–æ–≤–∞–Ω–∏–µ!"
		break
	case entities.TaskTypeCall.Creds.Name:
		r.Body = fmt.Sprintf(`–î–æ–±—Ä—ã–π –¥–µ–Ω—å, —è –≥–æ–≤–æ—Ä—é —Å %v?. –û—Ç–ª–∏—á–Ω–æ! –ú–µ–Ω—è –∑–æ–≤—É—Ç –ê–Ω—Ç–æ–Ω, —è - –º–µ–Ω–µ–¥–∂–µ—Ä –ø–æ –Ω–∞–±–æ—Ä—É –ø–µ—Ä—Å–æ–Ω–∞–ª–∞ –≤ –∫–æ–º–ø–∞–Ω–∏–∏ ITBestTech. –ú—ã —Ö–æ—Ç–µ–ª–∏ –±—ã –ø—Ä–∏–≥–ª–∞—Å–∏—Ç—å –í–∞—Å –Ω–∞ —Å–æ–±–µ—Å–µ–¥–æ–≤–∞–Ω–∏–µ. –ö–∞–∫ —è –ø–æ–Ω–∏–º–∞—é, —Å–µ–π—á–∞—Å –í—ã —Ç—Ä—É–¥–æ—É—Å—Ç—Ä–æ–µ–Ω—ã –≤ –∫–æ–º–ø–∞–Ω–∏–∏ "%v"?`, contact.Name, contact.Company)
		r.DueTime = time.Now().Add(15 * time.Minute)
		break
	default:
		r.Body = fmt.Sprintf(`–î–æ–±—Ä—ã–π –¥–µ–Ω—å, %v üëã –ö–∞–∫ —è –ø–æ–Ω–∏–º–∞—é, —Å–µ–π—á–∞—Å –í—ã —Ç—Ä—É–¥–æ—É—Å—Ç—Ä–æ–µ–Ω—ã –≤ –∫–æ–º–ø–∞–Ω–∏–∏ "%v". –ú–µ–Ω—è –∑–æ–≤—É—Ç –ê–Ω—Ç–æ–Ω, —è - –º–µ–Ω–µ–¥–∂–µ—Ä –ø–æ –Ω–∞–±–æ—Ä—É –ø–µ—Ä—Å–æ–Ω–∞–ª–∞ –≤ –∫–æ–º–ø–∞–Ω–∏–∏ ITBestTech. –ú—ã —Ö–æ—Ç–µ–ª–∏ –±—ã –ø—Ä–∏–≥–ª–∞—Å–∏—Ç—å –í–∞—Å –Ω–∞ —Å–æ–±–µ—Å–µ–¥–æ–≤–∞–Ω–∏–µ. –ò–Ω—Ç–µ—Ä–µ—Å–Ω–æ –ª–∏ –í–∞–º –Ω–∞—à–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ?`, contact.Name, contact.Company)
		r.DueTime = time.Now().Add(10 * time.Minute)
	}

	return r

}

func (c *TaskDemoServiceImpl) updateLinkedinTask(r *entities.Task) {
	switch r.Action {
	case "view_profile":
		r.Name = "–ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å –ø—Ä–æ—Ñ–∏–ª—å"
		r.Description = "–ó–∞–π—Ç–∏ –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—É –ø—Ä–æ—Ñ–∏–ª—è Linkedin –∏ –ø–æ–¥–ø–∏—Å–∞—Ç—å—Å—è " + r.Contact.Linkedin
		break
	case "private_msg":
		r.Name = "–ù–∞–ø–∏—Å–∞—Ç—å –ª–∏—á–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ"
		r.Description = "–ù–∞–ø–∏—Å–∞—Ç—å –ª–∏—á–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –ø—Ä–æ—Ñ–∏–ª—é " + r.Contact.Linkedin
		break
	}

	r.Name = "–ù–∞–ø–∏—Å–∞—Ç—å —Ö–æ–ª–æ–¥–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ"
	r.Description = "–ó–∞–π—Ç–∏ –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—É –ø—Ä–æ—Ñ–∏–ª—è Linkedin –∏ –Ω–∞–ø—Å–∞—Ç—å —Ö–æ–ª–æ–¥–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ " + r.Contact.Linkedin

}
