package backend

import (
	"fmt"
	"salespalm/server/app/entities"
	utils2 "salespalm/server/app/utils"
	"time"
)

func RefreshTask(t *entities.Task) {

	//if len(t.Name) == 0 {
	t.Name = calcName(t)
	//}
	//if len(t.Description) == 0 {
	t.Description = calcDescription(t)
	//}

	if t.HasFinalStatus() {
		return
	}

	calcStatus(t)
	calcAlertness(t)

}

func calcLinkedinTaskDescription(t *entities.Task) string {
	switch t.Action {
	case "view_profile":
		return "–ó–∞–π—Ç–∏ –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—É –ø—Ä–æ—Ñ–∏–ª—è Linkedin –∏ –ø–æ–¥–ø–∏—Å–∞—Ç—å—Å—è {{.Contact.Linkedin}}"
	case "private_msg":
		return "–ù–∞–ø–∏—Å–∞—Ç—å –ª–∏—á–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –ø—Ä–æ—Ñ–∏–ª—é {{.Contact.Linkedin}}"
	}

	return "–ó–∞–π—Ç–∏ –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—É –ø—Ä–æ—Ñ–∏–ª—è Linkedin –∏ –Ω–∞–ø–∏—Å–∞—Ç—å —Ö–æ–ª–æ–¥–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ {{.Contact.Linkedin}}"
}

func calcLinkedinTaskName(t *entities.Task) string {
	switch t.Action {
	case "view_profile":
		return "–ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å –ø—Ä–æ—Ñ–∏–ª—å"
	case "private_msg":
		return "–ù–∞–ø–∏—Å–∞—Ç—å –ª–∏—á–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ"
	}

	return "–û—Ç–ø—Ä–∞–≤–∏—Ç—å InMail"
}

func calcStatus(t *entities.Task) {
	now := time.Now()
	if t.StartTime.After(now) {
		t.Status = entities.TaskStatusPending
	} else if t.DueTime.Before(now) {
		t.Status = entities.TaskStatusExpired
	} else {
		t.Status = entities.TaskStatusStarted
	}
}

func calcAlertness(t *entities.Task) {
	if t.HasFinalStatus() {
		t.Alertness = entities.TaskAlertnessGray
	} else {
		durationToDueTime := t.DueTime.Sub(time.Now())
		if durationToDueTime < 0 {
			t.Alertness = entities.TaskAlertnessGray
		} else if durationToDueTime < 5*time.Minute {
			t.Alertness = entities.TaskAlertnessOrange
		} else if durationToDueTime < 2*time.Minute {
			t.Alertness = entities.TaskAlertnessRed
		} else {
			t.Alertness = entities.TaskAlertnessGreen
		}
	}
}

func calcName(t *entities.Task) string {
	switch t.Type {
	case entities.TaskTypeWhatsapp.Creds.Name:
		return "–ù–∞–ø–∏—Å–∞—Ç—å –≤ Whatsapp"
	case entities.TaskTypeTelegram.Creds.Name:
		return "–ù–∞–ø–∏—Å–∞—Ç—å –≤ Telegram"
	case entities.TaskTypeCall.Creds.Name:
		return "–ü–æ–∑–≤–æ–Ω–∏—Ç—å –ø–æ —Ç–µ–ª–µ—Ñ–æ–Ω—É"
	case entities.TaskTypeLinkedin.Creds.Name:
		return calcLinkedinTaskName(t)
	case entities.TaskTypeManualEmail.Creds.Name:
		return "–û—Ç–ø—Ä–∞–≤–∏—Ç—å –ø–∏—Å—å–º–æ"
	}
	return "–í—ã–ø–æ–ª–Ω–∏—Ç—å –∑–∞–¥–∞—á—É"
}

func calcDescription(t *entities.Task) string {

	switch t.Type {
	case entities.TaskTypeWhatsapp.Creds.Name:
		return fmt.Sprintf(`–ù–∞–ø–∏—Å–∞—Ç—å –≤ –ª–∏—á–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ Whatsapp: <a target="_blank" href="%v">{{.Contact.Phone}}</a>`, utils2.FormatUrl("https://wa.me", t.Contact.Phone))
	case entities.TaskTypeTelegram.Creds.Name:
		return fmt.Sprintf(`–ù–∞–ø–∏—Å–∞—Ç—å –≤ –ª–∏—á–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ Telegram: <a target="_blank" href="%v">{{.Contact.Phone}}</a>`, utils2.FormatUrl("https://t.me", t.Contact.Phone))
	case entities.TaskTypeCall.Creds.Name:
		return "–ü–æ–∑–≤–æ–Ω–∏—Ç—å –ø–æ –Ω–æ–º–µ—Ä—É —Ç–µ–ª–µ—Ñ–æ–Ω–∞ {{.Contact.Phone}}. –ù–∞—Å—Ç—Ä–æ–π—Å—è –Ω–∞ –ø—Ä–æ–¥—É–∫—Ç–∏–≤–Ω—ã–π –ª–∞–¥ üòä"
	case entities.TaskTypeLinkedin.Creds.Name:
		return calcLinkedinTaskDescription(t)
	case entities.TaskTypeManualEmail.Creds.Name:
		return "–û—Ç–ø—Ä–∞–≤–∏—Ç—å –ø–∏—Å—å–º–æ –¥–ª—è {{.Contact.Name}} –Ω–∞ {{.Contact.Email}}"
	}

	return ""
}

func IsTaskAutoExecuted(t *entities.Task) bool {
	return t.Type == entities.TaskTypeAutoEmail.Creds.Name
}
